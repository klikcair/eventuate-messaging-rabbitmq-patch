buildscript {
    repositories {
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.13.2"
    }
}

plugins {
    id "com.google.cloud.artifactregistry.gradle-plugin" version "2.1.5"
}

allprojects {
    group = "io.eventuate.messaging.rabbitmq"
}

apply plugin: 'maven-publish'
apply plugin: 'docker-compose'
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublishDockerImages"

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.google.cloud.artifactregistry.gradle-plugin'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    repositories {
        mavenCentral()
        jcenter()
        maven { 
            url "https://repo.spring.io/milestone"
            url "artifactregistry://asia-southeast2-maven.pkg.dev/digital-community-bank/mvn-public-repo" 
        }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    dependencies {
        testCompile "junit:junit:4.12"
        testCompile "org.mockito:mockito-core:2.23.4"
    }
}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregated Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP

        destinationDir file("$buildDir/docs/javadoc")
    }
}

dockerCompose {
    projectName = null
    environment.put "DOCKER_IMAGE_TAG", dockerImageTag

    publish {
        projectName = null
        useComposeFiles = ["docker-compose.yml"]
        removeContainers = project.ext.removeContainers
    }
}
